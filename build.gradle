buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.10.RELEASE")
		classpath("se.transmode.gradle:gradle-docker:1.2")
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'
apply plugin: 'docker'

group = 'globallogic'
version = '0.0.1'

repositories {
	mavenCentral()
}

dependencies {
	compile('org.postgresql:postgresql:42.2.2')
	compile('org.liquibase:liquibase-core:3.5.3')
	runtime('org.postgresql:postgresql:42.2.2')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework:spring-jms')
	compile('com.amazonaws:aws-java-sdk:1.10.55')
	compile('com.amazonaws:amazon-sqs-java-messaging-lib:1.0.0')
	compile('org.elasticmq:elasticmq-rest-sqs_2.11:0.10.1')
	compile('io.springfox:springfox-swagger2:2.7.0')
	compile('io.springfox:springfox-swagger-ui:2.7.0')
	compile group: 'org.springframework.cloud', name: 'spring-cloud-aws-messaging', version: '1.1.3.RELEASE'
	compile group: 'javax.jms', name: 'javax.jms-api', version: '2.0.1'

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.elasticmq:elasticmq-rest-sqs_2.11:0.10.1')
}

jar {
	baseName = 'spring-boot-queue'
	version = '0.0.1'

	manifest {
		attributes "Main-Class": "com.globallogic.SpringBootQueueApplication"
	}

	from {
		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

springBoot {
	executable = true
}

task createImage(type: Exec) {
	commandLine 'docker', 'build', '-t', 'sbqueue', '-f', 'Dockerfile', './'
}

task liquibaseUpdate(type: JavaExec) {
	group = "liquibase"
	classpath configurations.compile
	main = "liquibase.integration.commandline.Main"
	args "--changeLogFile=$projectDir/src/main/resources/changelog.sql"
	args "--username=root"
	args "--password=root"
	args "--url=jdbc:postgresql://localhost:5432/storage"
	args "--driver=org.postgresql.Driver"
	args "--logLevel=info"
	args "update"
}